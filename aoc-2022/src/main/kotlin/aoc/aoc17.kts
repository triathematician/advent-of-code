import aoc.AocRunner
import aoc.print
import aoc.util.*
import kotlin.experimental.and

val day = 17

val testInput = """
>>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>
""".trim().toList()

val input = """
>><<<<><<<<>><<<<>>><>><<><><<>>>><<<>>>><<><<<<>>>><<>><<>>><<>>>><>>>><<<>>>><<<>><<<<>><>>><>>><<>>><<>>><><<<>><<>>>><<<<>>>><>>>><<<<>>>><<<<>>>><<<>>><><<><<<<><<>>>><<<>>><<>><<>>><>>>><<<<>><<>>>><<>><<>>><<<<>>><<<><<<>><<><><<>><<>>><<<><<><<>>><<<>>><>>><<<<>>><<<><<<<>><<><<>>><<<<>>><<<>><<>>>><>>>><<<>>>><<<>><><>>><<<>>>><<<>>>><<<<>>>><>>>><>>>><<>>><<<<><<>>>><><<<<>><<>>><<>>>><<<><><>>><<>>><>>><<<>><<><<<<>><<<>>>><<<<>><<>>><<<<>>>><<>><>><><<>>>><<<<><>>><<<>>><<<<>>><<<>>><<>><<<>>>><<>>>><<<>>><<<<>>><<<>><<>>><<<<>>><<<<>><><<<>>><<<<>>>><<>><<>>><<>><><<>><<<>>>><<<<>><<<<>>>><<>><<<<><<<<>>>><>><<>>><<<<>>><<<<>><<<<><<>>>><>>>><<<<>>><<<>><><<<>><<>>><<>>><<<>>><>>><>>><<<>><<<<>><<<<><>>><<><>><<<><<<<>>>><<><>><><<>>><<>>>><<<<><<<<><<<><>>><>><>><<<<>>>><<>><<<>>><><<<<>>><<<>>>><<<>>>><<>><<<>>>><<<<><<><<<<>>>><<<>>>><>>><>>>><<<<>>>><<<>>>><<>><<<>>><<<<><<<>><<>><<>>><<>>>><>><<>><><<>>>><<<>>>><<<><<<><<<>>>><<<>><<>>>><<<<>>>><<<<>>>><<<>><<>>><><<<><<<>>><<><<<>>><<<<>>><<>>><>><<<><<<><<<<>>><<<>>><>>><<<><<<>><<><<<<>>><<><<<<>>><<<>>><<<<>>>><<>>>><<>>><<<>>>><<<<>>><<<<><<<>>><>><>>><<<<>><>>><><<>><<<>>>><>>>><<>>>><<<<>><<<>><<<<>>>><<<<>>>><>>><<<>>><<<<>><>>>><<<<>>><<>>>><<<<>>>><<<<>>><<<>><><<<<>>>><><>><<<>>><<>><<<>>>><<>>>><<<<>><<<<>>><<>>>><<<<>>><<<<><<>><<>>>><<<>>>><>>><<<<>>><<<<><<<<>><<>>>><<<>>>><<>>>><<<><<<<>><<>>>><<<>>><<<>>>><><<<<>>>><<><<<>><>><<>>>><>><<<>>>><<>>>><<<<>><<>><<>>>><<>>><><<>><<<<>><<<<>>>><>><<<<><<><<<<><<<>>>><<<>>><<<<>><<<<>>>><<<<>>><<<>>><<><<<>>><<<<>>>><<>>><<<><<<<><<<<>>>><<><<><<<<>>><<<>><<><<<><<<>>>><<<<><<<>>><<<>><>>>><<><<<><<<<>><<>><<<>>>><<<<><<<<>>>><<>>><<>>>><<<<>>><<>><<>><<>>><>>>><<<>>>><<>>><><<>><<>>>><<<>>>><<<>>><><<><>>>><<><<>><><<<>>><<>>>><<<<><<>><<>>>><<>>><>><>><<<<>>><<<>>>><<<<><<<<>><<><<<<><<<<>>><<>>><<<><<<<>>>><>>>><<<>><<<>>>><><<<>>>><<><<<>>>><<<><>>>><<>>><<>>><>>>><<<<>>>><<<>>><<<<>><<<<>>>><<<>><>>><<<<>>><<<<>><<>>>><<>>><<<>>><<><<<<>><<<>>><<<<><<<>>>><<>>>><<<<>>><<><<<<>><<<<>><<>>><<<<><>>>><<<>>><<<<>>>><<<<><<<<><>><<<>>>><<<<>><>>><<<>>><<><<<>>><<<><<<>>>><<>>><<<>>>><<<<>>><><<<><>>><<>>>><>>>><>>><<>>><<<>>><<>><<<<>>><>><>>><>><<<>>><<>>><<<>>><>>><<<>><><<<>>><<<>>><<<<>><<>>><>>><<<><<>><<<<>><<>>>><<>><<<<>><<>>><<><<<<><<<>>>><<<<>><<<<>>><<>>>><<<<><>>>><>>>><<<<>>>><<>><<>>><>>><<<>>>><<<><<><<<<>><<<><>><>><>>><<<<>><<<>><<<>>><<<>><<><<>>>><<>>><<><>>>><<<<>><>><<>><<>>>><<<>>><>>>><<<<>>>><<<<>><<<<><<>>>><>>>><<>>><<<><<>>><><<<>>><<>>>><<<>>><<>><>>>><<>>>><>><<>><<<>>><<><>>><<<<><<<><>>><<<>><<<<>>><<<>>>><<>>>><<><<>>>><<<><<<>>><<<<><<<>>><<<<>>><><>><<<>>><<>>><<<>>>><<<>>><<<<>>><<>>>><<<>>>><>>>><<<<>><<<>><<><>>>><<<>>>><><<<>>>><><<<<>><<>><<>>>><<>><<<>>><<>>>><<<>><<<<>>>><<>><<<><<<<><<<>>><>><<><>>><<>><><<>>>><><<<><>><<><<>>>><><<<><><<>>><<>>>><<><><<<>>><<<>>>><<<<>><>>>><<>><<>><<>><<>><<<<><<<>>><<>>><><<<<>><<<<><<><<>>><<<>>>><<><>>>><>>>><<>><<>>><<<><<>><<>>>><>><<<>>><<<>><<<<><<<<><<>>><<>>><<<<>>>><<<<>>>><<><<<>>><<<<>>><<<<>>>><<<<>>>><<<>>>><<>>><<>>><<>><>><<<>>><<<<><<<>>>><<<>>><<<<>>><<>><<>>>><<<><<<<><<<>>><<<<>>><<>><>>><>>>><<<<>>><><><><<>><<<>>><<>><<<<><<<<><<<<>>><>>>><<<><<><<>>><<>>><<>><<<>><<<<><<<>>><<>>>><>>>><<>><<><><<<>>>><<>><><>>>><<><<<><<<><<>>><<<><>><<<>>><<<>>>><<<>>><<<><<<<>>>><<<<>><<>><<<<>>>><<<>>><<><>>>><<<>><<<>>><<<>>><<<<>><<<>><<<<>>><<<>>><<>>>><<<<><><<<<>>>><<<>>><<<><<<>>><<<>><<<<>>><<<>><<<>>>><<<<><<>>><<<>>><<>>><<<<><<<>>><<><<>>><<<>><<<<>>>><>>><<<>>><<<>><><<>><<<>>>><<>><<<>><<>>><<<>>><<<<>>>><<<<>><<<<>>><<<<>>><<><<>><<<>>><<<>>>><<<><<><<>>><>><<><<><>><<>><<<>><<>><<<>>>><<<><<<<>>>><<><<<>>><<>>>><>>>><>>>><>>>><<<<>>>><<<<>>><>><>>><<>>><<<>>>><<<>>>><<>>><<<>>>><<>><<<<>><<<<>>><<><<>>>><<<<>>>><<<<><<<>>>><>>>><<><><<><<<>><<><<<<><<<<>>><<<<>>>><>><<<<>>><>><<<>><<<>>><>>>><><>><>><<<<>>>><<>><<><<<<>>><<<>><<<><<<>>>><<<<><<>><<>>><<<<>><><<>><>><<<<>>><<<><<<>><<<>>>><<<>><><<<><<>>>><<<>><<><<<><<<<>>><<>>>><<<<>>>><>>><>>><<<>><<>><<>><<<<>>>><>>><<<>><<><<>>><<<<><<<>><>><<>>><>>><<<<><<>>>><<<>>><<<>><<>>><<<<>>>><<<>><<<<>>>><<<>><>><<>>>><<<<>>>><>>><<>><><<<<>>>><<<<>>><<<>>><<<<>><<<<><<<<><<>>>><<>>><<<<>>><<>><<>><<<<>><<<>>>><<<><<<<>><<<<><>><<<>><<<>>><<<>>>><<><<>><>><>><<<>>><<<<><<<><>>>><<>>><<>>><>><<<<>>>><<<<>>><<<>>><<<><<<>>><<>>>><<<>>>><>>><><<<<><>><>>>><>><<<>>>><<>><<<<><<<<>><>>><>>><<<>>>><<<>>><<<<>>><<<<>><<<>>><<>>>><<><<<><<>><<<<>><>><<>>>><>>><<<>>>><>>><<>>>><<<>>>><>>><<<<><<<<>>><<>><<<<>>>><<<>>><<<<>>><<<<>>>><<>>><<<<>>>><<<><<<>><<<>>><>><<>>><<<<>>>><<<>>><>>>><>><<<>>>><<>>><<>><>>><<<>>><>>><<>>><<<<>><<<<>><>>>><<<>>>><>>><<<<><<<<><>>>><<<<>>><<>><<<>><><<<>>>><><<<<>>><<<>><<<<><<><>>><<<>><<<<>>>><<<<><<<<>>><<<>><><<<<>><>><<<<>>>><<<><<>>><<<><<>>><<><<<>><<>>><<<>>><<>>><<<>>>><<<>><<<><<<>>><>><<>>>><<<>><<<>>>><>>>><>><<<><<>>><<>><<<<><<<>>>><<<<>>><<<>>>><<<<>>>><<>>>><<>>>><<<>>><<>>>><<>><><<<>><<<><<>>><<><>>><<<><<>>>><>>>><<<>>>><<<><<<<>>><>>>><<<>>>><<<<>>>><>>>><<<<>>>><<<<><<<<>>>><<<>>>><<>>>><<>>><>>><<<>>>><><<<>>><<>>><<>>>><<<<>>>><<><<<<>>>><<<<>><<<>>><<>><<<<>><<<<><<<<><<><<>>>><><<>><>>>><<>>><>><<<<>>>><<>>><>><<><<>><<<<>>>><<<<>>>><<<>>>><<<<>>>><<>>>><><<<><<><<<<>>><<><<>>><><<<><<<>>><>><<>>><<<>>>><<<<>>><>>><>>>><<<<>>><<<<>>>><>>><<>>><<<><<>>><<><<<<>><<>>><<<<><<<>><<<><<<<>><<>><><<><<<<><>><<<<>><<<>>>><<<<><<>>><<<>>>><<<<><<<>><><<>><<<<>>><<<<>>><>><<<<><<<<>>>><<<<>>>><<<<>>><<>><<>><>><><>><><><<>><<<>>><<<>>>><<<><<<<>>><>>>><<<>>><>>><>>><<<>><<<<>>><<<<><<>><<<<>><>><<<<>>>><<<<>>>><<>><<<>><>>>><>>>><>>>><<<<>><<<<>><<>>><<>>>><<><<>><>>><><<>>><><<>>>><<>><<>><<<<>>>><<>><<<>><<<>><<<>>><<<>><>>><<<>><<<>>><<<<>>>><<>><<><>>><<><<>>>><<<>>><<<<>>>><<<<>>><<>>><<<>><<<<><>>><>>><<<>>>><<>>><<>><<<>><><><<<<><<><<>><><<<>>><<<>>><>><<><<<>><>>>><><<<><<<<>>>><<<<>>>><><<<<><<<<>>><>>>><<<<><<>>>><><>>>><<><>><<<<>>><<>>><<>>><<<><<<><<>>>><<>><<<<>>><<>>><<<>><<><<<<>>>><<<><<<<><>>><<<>>>><<<>>><>><>><<<>>>><<<>>><<>><>><<<<>><><<<>>><<<>><<>>>><>>>><>>>><<><><<<<>>>><<>>>><<>><<<<>>><<<>>><>>>><<>><<<<>>>><>><<<>><<<>>><<<><<<<>>>><<<><<<>>>><<<<>>>><<<><<<<>>>><<<<>>>><<><<<>>>><<<><<<>><<<><<<<>>><<<<>>><<<><>>>><<<>><>>><<>>><>>><<<<>>><<<<>>><><>>><<<>><<>>><<<<>>><<<<><<>>><<><<<<>>>><<<<>>>><>>><<<>><<<<><<<<><<>><<<<>><<<<>><>>><<<><>>>><<<>>>><<<<>>>><<<<>>>><<>>>><<<<>>><<<>><><<><<><><<<<>>><>>>><>><<>>><<<<>><>>><>>>><>>><<<>><<<<>><>>>><<<><<<<>>><<<<>>><<<<>>>><<<>>>><<<>><<><>>>><<<<>>><>>>><>>><<>>><>>><<<<>>><<<>><<<<><<<><<>>><><<>><>><><<<>>><<<<>><<>><<><<<<>><>>><>>><<<<><<<>><>><>><<<<>>><<<<><<>>>><<<<>>><><>><<<>>>><>><<<><<>><<>>><<<<><>>>><<>>><<>>>><>>><<>>>><>>>><<<<>>><<<>>>><<<<>>><<<<>>><<<>><<>>><<<>>>><<<<>><<<<>><><<<><<><<<>>>><<>><>>><<><<<>>>><<<>>><>>><<<<>><<>>>><<<>><<><<<<>>><<<<>><<><<<>>>><>>><>>>><<<>>><<<><<<>>>><<<<>><>>><><<<<>>><<<<>><<>><<<<><>>><<>>>><<<<><<>><<<>><<><<<>>><<<<>>>><<>>>><<<>>>><<>>>><<<<>>><<<>><>>>><<<<>><<><<><><><<<>>><<<>>>><<><<<<><<>><<<>>>><<<>><<<<><<<<>>><>>>><<<>>>><<>><<>>><>>>><<<>>>><<<<>>>><<<>>><<<>>>><<<<>>>><>>>><<><<>>><<<><<<<>>>><<<<>><<<><<<<>>>><>><<<>><<>>><<>><<<<><<<<>>><>>><<<<>>>><>>>><><<<>>><><>><<<<>>>><<<>>><>>><<<><<<><<><<<>><<<<>><<>>><<>>>><<>>>><<<>>><<><<<><<<<><<><<<<>>><<<<><<>>><<<>><>>>><>><>><>>><<<><<<<>>><<<<>><><<<<>><><<<<>>>><<<<>>>><<<<>>><<><<>>>><<<<><<>>><<>>><<<<><<<<>>><<<><<<><<<<><<<><<<<><<>>>><>>>><>>>><<>>><<<<>><<<>>><><<<><<<<>>>><<>>>><<<<>>>><<>><<><<<>>><<><<<<>>>><<<<>><<><<>>>><><<<>><>><<><<<<>>><<><<<<>>>><<<<><<<<>>>><<<>><<<><<>><<<<>><<>>><<<>>>><>>><<<<>>>><<<<>><<<>><<<><<<>>><<<>>><><<<>>><<<>>>><<<>>>><>>><<<<>>><<<<>>><<>>>><><>><<<>><<><<>>><<<<>><<<>><<<<>>><<<<><<<>>>><<<><<<<><>><<>>>><><><<<<>>>><<>>><<<<>>>><<<><<>>>><<<<>>><<<<>>><<<<>>><<<<>><>><<<>>>><><>>><<<>><<<>><<<<>>><<>>>><<>><<>><<<>>>><<><<<>>>><<<<>>>><>>>><<<>>><>>>><<<>>>><<<<><><>><<<<>>><<<<><<<<>>><>>>><<<<><>>>><>><<<<>>>><<<<><>>>><<><<<>>>><><<<<>><<>><<<>>>><<<>><><<>>>><<>><<>>>><<><<<<>>><<<<>>><<<<>>>><>>><<>>><<<><<<><>>>><<<>><<<<>>><<<<>><<<>><><>>><<<>>>><><<>>>><<>><>>>><<<>><><><<<>>>><<<<>><<>>><>>><<<>><<<>><<<>>>><<<><<<>>><<<><>>>><<<>>>><<<<><><><<>><<>><<<<>><<>>><>>><<<>>>><<<<>><<<><>>>><<<<><<<<>>><<<>>>><<<>>><<><<<<><<<<>><<>>><<>>>><<<<>>><<>>>><>>>><<<<>><<<>><<<<><<<>>>><<<<><<<>>>><<<>>><>><<<<>><<<<>>><<<><<>><>><<><<<<>><<<>><<>><><<>><<<<><>><<<>><<<<>><>>><<<<>>><>>><<<<><<><>>><<<<>><>>>><<<>><<<>><<<<>>>><<<<>>><>>><<>>>><<>><<<>>><><<<<>><>>>><<<>><<<>><<><>>>><<><<<>><<<<>>>><<<<>>><<>><<<<>>><<<<>><><<<<>>><>><<<>>><<<>>><<>><><<<<>><>><>>>><<><<>>>><<<>><<<<><>>><<>><><<>><<<>><>><>><>>><<<><>>><<>>><<<<>><<>>><><<>>><<<>><<<<>>><<<<>>><<<<>><<>>>><<<<>>><<<<>><>>>><<>><<<>>>><>><<<>>>><<<>>><<<<>>><<<<>><<>>>><>>><<<<><<<>>><<>>><<<<>>><<<<>><>><<<><<<<><>><>>>><<<>>><>><<<<>>>><>><<<<><<<<>>>><>>><<<>>><<>><<>>>><<>>><<<<>><<>>><<<>>><<>><>>><<<>><>>>><<<>><<><<<>>>><<<<><<<>>>><<<><<<<>><<<<>><<<><>>>><<>>><>><<<>>>><>><>>>><<<<>>><><<<<>>><>><<<<>><>>><<>>><<<>>>><<>><<<<><<><<>><><<>>><<>><<<><<<<>>>><<<>>>><<>>>><>>>><<<>>>><<<>>><<<><<><<<><<<<><<<<>>><<<<><<<><<<<>>><><<<<>>><<<<><<>><<>>><><<>>>><<>>>><<<>>><<<<>>><>>><>>>><<>>>><<<><>>>><<>>><><>>><<<<>>><<<<>>><<><<<>>><<<><<<<><<<<>>>><<<<>>>><<><>><<><<<><<<>><<<>>>><<<<>>><<<<><><>><>>><<<<><<>>>><<<>>>><>>>><>>>><><<>>>><>>><<<<>>><<<<>><<><<<<><<<<>>>><<<<>><<<<>>>><<<<>>>><<<>>><<<<><<<<>>>><>>><>>><<<<><>>><<>><<<<>>>><<<<>>><><<>>><>>><<<<>><>><>>>><<<<><<<><<<>>><<<<>>>><<<>>><><<<>>>><<><<<<>>><><<<>>>><<><<<><<<<>><><<<<>><>>><<>>><>>>><<>>><<<<><<>><<>>>><<>>><<<<><<><<<>><<<>>><><<<<>>>><><<<<>>>><<>><<>>><><<<>><<<<><>>><<<<>>>><<<<>>><<<<>>><>><>><<>>><<<<>>>><<>><<<>>>><<><<>>><<<>>>><<>>><<<><<<<><<>>>><>><<><<<>>>><<<<>><<<<><>><>>><>>><<<>>><>>><>><<<<>>><<<>><<<<>>><<<>>>><<<<><><<<<><<<<>><<><<><<<<>><<><>>><><>><<<><<<><<<>><>>><>><<<>>>><<<<>>>><<>><>>>><<<>><<<>>><>><<<<>>><>><<<>><<<<><<<>>><<>><<<<>>>><<<>>>><<<<><>><<
""".trim().toList()

// test case

class Rock(val sh: RockShape, var pos: Coord) {
    var done: Boolean = false

    fun moveLeft(grid: CharGrid) {
        val tryPos = pos.left
        if (sh.canPlaceAt(grid, tryPos))
            pos = tryPos
    }

    fun moveRight(grid: CharGrid) {
        val tryPos = pos.right
        if (sh.canPlaceAt(grid, tryPos))
            pos = tryPos
    }

    fun moveDown(grid: CharGrid) {
        val tryPos = pos.top // decreasing y
        if (sh.canPlaceAt(grid, tryPos))
            pos = tryPos
        else {
            sh.fixAt(grid, pos)
            done = true
        }
    }
}

val POWS = arrayOf<Byte>(1, 2, 4, 8, 16, 32, 64)
fun Byte.digitAt(n: Int) = (this and POWS[n]) > 0

enum class RockShape(_shape: String, val byteShape: Array<Byte>) {
    STR("####", arrayOf<Byte>(15)),
    PLUS(".#.\n###\n.#.", arrayOf<Byte>(2, 7, 2)),
    ELBOW("###\n..#\n..#", arrayOf<Byte>(7, 4, 4)), // first line is bottom
    DOWN("#\n#\n#\n#", arrayOf<Byte>(1, 1, 1, 1)),
    BOX("##\n##",arrayOf<Byte>(3, 3));

    val ZERO = 0.toByte()
    val POWS = arrayOf<Byte>(1, 2, 4, 8, 16, 32, 64)

    fun canPlaceAt(grid: CharGrid, pos: Coord): Boolean {
        if (pos.x < 0 || pos.x > 7-width || pos.y < 0)
            return false

        return byteShape.withIndex().all {
            grid.grid[pos.y + it.index] and (it.value*POWS[pos.x]).toByte() == ZERO
        }

//        var old = true
//        shape.forEachIndexed { i, line ->
//            line.forEachIndexed { j, c ->
//                if (c == '#') {
//                    if (grid.grid[pos.y + i].digitAt(pos.x + j))
//                        old = false
//                }
//            }
//        }
    }

    fun fixAt(grid: CharGrid, pos: Coord) {
        byteShape.forEachIndexed { i, line ->
            grid.grid[pos.y + i] = (grid.grid[pos.y + i] + line*POWS[pos.x]).toByte()
        }
        grid.rockLine = grid.rockLine.coerceAtLeast(pos.y + byteShape.size - 1)
    }

    val shape = _shape.split("\n")
    val width = shape.maxOf { it.length }
}

class CharGrid(size: Int) {
    // first index is row, starting at the bottom, second index is column
    val grid = ByteArray(size)
    // index of rock to fall
    var rockIndex = 0
    // position of last line with rocks
    var rockLine = -1

    fun rockFall(input: List<Char>, i: Int): Int {
        val r = Rock(RockShape.values()[rockIndex++ % 5],
            2 to rockLine + 1)
        var index = i
        r.blow(input[index++ % input.size])
        r.blow(input[index++ % input.size])
        r.blow(input[index++ % input.size])
        do {
            r.blow(input[index % input.size])
            r.moveDown(this)
            index++
        } while (!r.done)
        return index
    }

    fun countRows() = rockLine + 1

    fun Rock.blow(dir: Char) {
        when (dir) {
            '<' -> moveLeft(this@CharGrid)
            '>' -> moveRight(this@CharGrid)
            else -> throw UnsupportedOperationException()
        }
    }

    fun print() {
        fun Byte.print() = (0..6).joinToString("") { if (digitAt(it)) "#" else "." }

        (rockLine+4).downTo(0).forEach {
            println("+" + grid[it].print() + "+" + if (it == rockLine) " $rockLine" else "")
        }
        println("+-------+")
        println("")
    }
}

fun computeResult1(grid: CharGrid, input: List<Char>, cycleSize: Int, cycles: Int, dropLimit: Long): Long {
    // assume that pattern repeats on this cycle, with only the first and last iteration being different
    val LOG_EVERY = 1
    if (dropLimit > 5000) {
        var i = 0
        var size = 0
        var dropped = 0L
        val counts = mutableListOf<Int>()
        var t0 = System.currentTimeMillis()
        (1..cycles).forEach {
            if (dropped < dropLimit) {
                if (it % LOG_EVERY == 0) print("Cycle $it with $cycleSize items...")
                repeat(cycleSize) {
                    if (dropped < dropLimit) {
                        i = grid.rockFall(input, i)
                        dropped++
                    }
                }
                val r = grid.countRows()
                counts += (r - size)
                size = r

                System.currentTimeMillis().also { t1 ->
                    if (it % LOG_EVERY == 0) println(" $counts in ${(t1-t0)}ms")
                    t0 = t1
                }
            }
        }
        println("---")
        val size2 = grid.rockLine
        val remainderToDrop = (TARGET_REPS % cycleSize.toLong()).toInt()
        repeat(remainderToDrop) {
            i = grid.rockFall(input, i)
        }
        println("The last set of $remainderToDrop dropped rocks adds ${grid.rockLine - size2} more lines with rocks.")
        println("---")
        println("Counts: ${counts.sum()} $counts")
        println("---")
        return grid.countRows().toLong()
    } else {
        var i = 0
        repeat(dropLimit.toInt()) {
            i = grid.rockFall(input, i)
            if (false) grid.print()
        }
        return grid.countRows().toLong()
    }
}

val TARGET_REPS = 1000000000000L

val testResult = computeResult1(CharGrid(4000), testInput, 5 * testInput.size, 1, 2022L)
testResult.print

fun computeTarget(repSize: Int, initReps: List<Int>, repeatingReps: List<Int>, lastRep: Int): Long {
    val repsComplete = (TARGET_REPS/repSize - initReps.size) / repeatingReps.size

    return initReps.sum() +
            repsComplete * repeatingReps.sum() + // repeating cycles
            lastRep
}

computeResult1(CharGrid(10000000), testInput, 5 * testInput.size, 20, TARGET_REPS)
val testResult2 = computeTarget(
    repSize = 200,
    initReps = listOf(308),
    repeatingReps = listOf(300, 306, 303, 303, 301, 306, 301),
    lastRep = 0
)
testResult2.print

// part 1

val answer1 = computeResult1(CharGrid(4000), input, 5 * input.size,1, 2022L)
answer1.print

// part 2

val answer2 = computeTarget(
    repSize = 5*input.size,
    initReps = listOf(), // TODO
    repeatingReps = listOf(76415, 76404, 76412, 76408, 76412, 76390, 76417, 76407, 76407, 76417, 76396, 76420, 76407, 76404, 76408, 76403, 76406, 76411, 76399, 76426, 76400, 76394, 76418, 76398, 76420, 76399, 76409, 76410, 76404, 76413, 76402, 76417, 76393, 76417, 76409, 76407, 76407, 76405, 76417, 76409, 76398, 76412, 76401, 76405, 76419, 76393, 76425, 76402, 76389, 76423, 76398, 76421, 76401, 76404, 76414, 76397, 76418, 76406, 76415, 76391, 76415, 76412, 76408, 76409, 76405, 76412, 76408, 76395, 76419, 76402, 76400, 76422, 76390, 76429, 76400, 76393, 76421, 76399, 76413, 76408, 76405, 76408, 76399, 76413, 76412, 76418, 76389, 76416, 76412, 76406, 76407, 76407, 76411, 76408, 76398, 76416, 76404, 76398, 76422, 76392, 76422, 76402, 76401, 76414, 76401, 76415, 76410, 76407, 76397, 76408, 76412, 76412, 76415, 76390, 76421, 76408, 76403, 76412, 76401, 76416, 76403, 76396, 76419, 76404, 76395, 76424, 76394, 76425, 76395, 76407, 76410, 76405, 76415, 76408, 76409, 76393, 76413, 76409, 76413, 76417, 76391, 76417, 76410, 76405, 76405, 76403, 76418, 76400, 76400, 76419, 76409, 76389, 76421, 76396, 76421, 76400, 76406, 76408, 76410, 76411, 76410, 76407, 76395, 76413, 76411, 76410, 76415, 76396, 76417, 76410, 76400, 76409, 76403, 76409, 76411, 76399, 76418, 76406, 76391, 76422, 76395, 76423, 76397, 76407, 76411, 76409, 76410, 76402, 76417, 76393, 76414, 76411, 76407, 76408, 76404, 76417, 76408, 76400, 76412, 76401, 76406, 76416, 76396, 76422, 76402, 76393, 76420, 76399, 76421, 76400, 76407, 76411, 76401, 76415, 76405, 76415, 76391, 76416, 76411, 76408, 76404, 76407, 76417, 76407, 76398, 76416, 76399, 76402, 76423, 76388, 76430, 76400, 76391, 76423, 76399, 76417, 76403, 76403, 76415, 76395, 76414, 76412, 76415, 76393, 76415, 76411, 76405, 76411, 76405, 76411, 76409, 76392, 76419, 76404, 76401, 76422, 76391, 76425, 76401, 76396, 76417, 76404, 76410, 76409, 76408, 76402, 76403, 76413, 76410, 76419, 76388, 76417, 76413, 76403, 76410, 76404, 76414, 76406, 76395, 76418, 76406, 76395, 76423, 76396, 76418, 76400, 76405, 76414, 76402, 76412, 76413, 76408, 76391, 76412, 76410, 76414, 76415, 76391, 76417, 76412, 76403, 76409, 76400, 76418, 76404, 76395, 76419, 76405, 76395, 76424, 76392, 76423, 76398, 76409, 76406, 76411, 76411, 76410, 76406, 76393, 76414, 76411, 76409, 76418, 76395, 76419, 76406, 76403, 76407, 76402, 76416, 76404, 76399, 76423, 76405, 76388, 76423, 76394, 76422, 76401, 76403),
    lastRep = 3000120
)
answer2.print

computeResult1(CharGrid(1000000000), input, 341*5*input.size, 10, TARGET_REPS)

// print results

AocRunner(day,
    info = { listOf("Leaderboard: 24:14/40:48", "Answers: 3067/1514369501484") },
    test = { "$testResult, $testResult2" },
    part1 = { answer1 },
    part2 = { answer2 }
).run()
